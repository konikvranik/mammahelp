import java.security.KeyStore.Builder;

import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply plugin: 'android'
apply plugin: 'eclipse'

version = '0.5'
android.defaultConfig.versionCode = 5

group = "cz.mammahelp.handy"

sourceCompatibility = 1.6



configurations { provided }
//
eclipse {

	classpath.plusConfigurations += configurations.compile
	eclipse.classpath.file {
	    beforeMerged { classpath ->
	    classpath.entries.removeAll() { c -> 
	        c.kind == 'src'
	    }
	}
	
	withXml {
	    def node = it.asNode()
	
	    node.appendNode('classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"')
	    node.appendNode('classpathentry kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES" exported="true"')
	    node.appendNode('classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES" exported="true"')
	
	    node.children().removeAll() { c ->
	        def path = c.attribute('path')
	        path != null && (
	                path.contains('/com.android.support/support-v4')
	                )
	    }
	  }
	}
	
	project {
		natures 'com.android.ide.eclipse.adt.AndroidNature',
				'org.springsource.ide.eclipse.gradle.core.nature',
				'org.eclipse.jdt.core.javanature',
				'org.eclipse.jdt.groovy.core.groovyNature'
				
		 buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
		 buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
		 buildCommand 'org.eclipse.jdt.core.javabuilder'
		 buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'

		name 'mammahelp'
	}
/*	classpath {


		//you can tweak the classpath of the Eclipse project by adding extra configurations:
		plusConfigurations += configurations.provided

		//if you don't want some classpath entries 'exported' in Eclipse
		noExportConfigurations += configurations.provided

		//customizing the classes output directory:
		defaultOutputDir = file('bin')

		//default settings for downloading sources and Javadoc:
		downloadSources = true
		downloadJavadoc = false
	}
*/
}


buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'com.android.tools.build:gradle:0.11.+' }
}


sourceSets {
	main {
		java { srcDir 'src' }
		java { srcDir 'gen' }
		resources { srcDir 'res' }
	}
}
repositories {

	def rootDir = project.rootDir
	def localProperties = new File(rootDir, "local.properties")
	def sdkDir
	def suppportRepoUrl
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream { instr -> properties.load(instr) }
		sdkDir = properties.getProperty('sdk.dir')
		suppportRepoUrl = "file:///" + sdkDir + "/extras/android/support"
	}
	print suppportRepoUrl + "\n"
	
	mavenCentral()
	maven {
		url suppportRepoUrl
	}
}

android {

	compileSdkVersion 19
	buildToolsVersion "19.1.0"

	defaultConfig {
		minSdkVersion 16
		targetSdkVersion 21
		versionName = project.version
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src/main/java']
			resources.srcDirs = ['src/main/resources']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		test.setRoot('tests')
		test {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}

		instrumentTest.setRoot('tests')
		instrumentTest {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}
	}

	signingConfigs {
		release {
			storeFile file("mammahelp.keystore")
			storePassword "lopata"
			keyAlias "mammahelp"
			keyPassword "lopata"
		}
	}

	buildTypes {
		release { signingConfig signingConfigs.release }
	}
	
	android {
		packagingOptions {
			exclude 'META-INF/LICENSE.txt'
		}
		
		lintOptions {
        	abortOnError false
    	}
	}

}

dependencies {

	compile 'com.android.support:support-v4:r7'
	compile 'com.android.support:appcompat-v7:19.0.0'
	compile 'com.google.android.gms:play-services:3.2.+'
	compile 'net.sf.jtidy:jtidy:r938'
	compile 'org.slf4j:slf4j-android:1.6.1-RC1'
	compile 'org.apache.commons:commons-lang3:3.2.1'
	compile 'rome:rome:1.0'

	testCompile 'org.slf4j:slf4j-log4j12:1.6.1'
	testCompile 'log4j:log4j:1.2.17'

}


/*

task copyDependencies(type: Copy) {
    description = 'Copy depencies to libs. Useful for Eclipse'
    libDir = new File(project.projectDir, '/libs')
    println libDir
    println 'Adding dependencies from compile configuration'
    for(file in configurations.compile)  {
        println 'Added ' + file
        copy {
            from file
            into libDir
        }
        eclipse.classpath.file {
		    withXml { xml ->
		        def node = xml.asNode()
		        def e = node.find { it.@path == file }
		        if(e) {
		        	node.remove( e )
		        }
		        node.appendNode( 'classpathentry', [ kind: 'lib', path: file, exported: 'false'])
		    }
		}
    }
    
    println 'Adding dependencies from releaseCompile configuration'
    for(file in configurations.releaseCompile) {
        println 'Added ' + file
        copy {
            from file
            into libDir
        }
        eclipse.classpath.file {
		    withXml { xml ->
		        def node = xml.asNode()
		        def e = node.find { it.@path == file }
		        if(e) {
		        	node.remove( e )
		        }
		        node.appendNode( 'classpathentry', [ kind: 'lib', path: file, exported: 'false'])
		    }
		}
        
    }
    println 'Adding dependencies from debugCompile configuration'
    for(file in configurations.debugCompile) {
        println 'Added ' + file
        copy {
            from file
            into libDir
        }
        eclipse.classpath.file {
		    withXml { xml ->
		        def node = xml.asNode()
		        def e = node.find { it.@path == file }
		        if(e) {
		        	node.remove( e )
		        }
		        node.appendNode( 'classpathentry', [ kind: 'lib', path: file, exported: 'false'])
		    }
		}
    }

    println 'Adding dependencies from instrumentTestCompile configuration'
    for(file in configurations.instrumentTestCompile) {
        println 'Added ' + file
        copy {
            from file
            into libDir
        }
        eclipse.classpath.file {
		    withXml { xml ->
		        def node = xml.asNode()
		        def e = node.find { it.@path == file }
		        if(e) {
		        	node.remove( e )
		        }
		        node.appendNode( 'classpathentry', [ kind: 'lib', path: file, exported: 'false'])
		    }
		}
    }
    

} 

*/