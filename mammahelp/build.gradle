import java.security.KeyStore.Builder;
import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply plugin: 'android'
apply plugin: 'eclipse'

version = '0.78'
android.defaultConfig.versionCode = 78

group = "cz.mammahelp.handy"

sourceCompatibility = 1.6

repositories {
	mavenCentral()
	maven {
            url "https://android-rome-feed-reader.googlecode.com/svn/maven2/releases"
    }
}

dependencies {

	compile 'com.android.support:support-v4:19.0.0'
	compile 'com.android.support:appcompat-v7:19.0.0@aar'
	compile 'com.google.android.gms:play-services:5.0.+@aar'
	compile 'net.sf.jtidy:jtidy:r938'
	compile 'org.slf4j:slf4j-android:1.6.1-RC1'
	compile 'org.apache.commons:commons-lang3:3.2.1'
	compile 'com.google.code.android-rome-feed-reader:android-rome-feed-reader:1.0.0-r2'
	compile('com.squareup.retrofit:converter-simplexml:1.6.1'){
	    exclude module: 'stax'
	    exclude module: 'stax-api'
	    exclude module: 'xpp3'
	}

}

configurations {
	provided
	// all*.exclude group: 'com.android.support', module: 'support-v4'
	// all*.exclude group: 'com.google.android.gms', module: 'play-services'
}

def libDir = new File(project.projectDir, 'libs')

eclipse {

	classpath.plusConfigurations += configurations.compile
	classpath.noExportConfigurations += configurations.compile
	
	eclipse.classpath.file {
	    beforeMerged {
	    	classpath -> classpath.entries.removeAll() {
	    		c -> c.kind == 'src'
	    	}
		}
		
   		withXml {
		    def node = it.asNode()
		
		    node.appendNode('classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"')
		    node.appendNode('classpathentry kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES" exported="true"')
		    node.appendNode('classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES" exported="true"')
		
		    node.children().removeAll() { c ->
		        def path = c.attribute('path')
		        path != null && (
		                path.contains('/com.android.support/support-v4')
		        )
		    }
	
			println node.children()
			
			delete libDir
			libDir.mkdirs()
		
			node.children().each() {
				def path = it.attribute("path")
				if (it.attribute("kind") == "lib" && !(
					path.contains("appcompat-v7")
					||path.contains("support-v4")
//					||path.contains("stax")
//					||path.contains("xpp3")
				)) {
					copy {
						from path
						into libDir
					}
				}
			}
		}
	}
	
	project {
		natures 'com.android.ide.eclipse.adt.AndroidNature',
				'org.springsource.ide.eclipse.gradle.core.nature',
				'org.eclipse.jdt.core.javanature',
				'org.eclipse.jdt.groovy.core.groovyNature'
				
		 buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
		 buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
		 buildCommand 'org.eclipse.jdt.core.javabuilder'
		 buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'

		name 'mammahelp'
	}

}

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'com.android.tools.build:gradle:0.11.+' }
}


sourceSets {
	main {
		java { srcDir 'gen' }
	}
}

android {

	compileSdkVersion 19
	buildToolsVersion "19.1.0"

	defaultConfig {
		minSdkVersion 15
		targetSdkVersion 21
		versionName = project.version
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src/main/java']
			resources.srcDirs = ['src/main/resources']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		test.setRoot('tests')
		test {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}

		instrumentTest.setRoot('tests')
		instrumentTest {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}
	}

	signingConfigs {
		release {
			storeFile file("mammahelp.keystore")
			storePassword "lopata"
			keyAlias "mammahelp"
			keyPassword "lopata"
		}
	}

	buildTypes {
		release {
			runProguard false
			proguardFile getDefaultProguardFile('proguard-android.txt')
			proguardFile 'proguard-project.txt'
			signingConfig signingConfigs.release
		}
	}
	
	android {
		packagingOptions {
			exclude 'META-INF/LICENSE.txt'
		}
		
		lintOptions {
        	abortOnError false
    	}
	}

}

