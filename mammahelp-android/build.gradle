import java.security.KeyStore.Builder;
import java.util.logging.Logger;

import groovy.xml.DOMBuilder
import groovy.xml.dom.DOMCategory

import org.gradle.plugins.ide.eclipse.model.SourceFolder

import groovy.xml.XmlUtil

apply plugin: 'android'
apply plugin: 'eclipse'

android.defaultConfig.versionCode = 91
version = '0.'+android.defaultConfig.versionCode

group = "cz.mammahelp.handy"

def gMapsKeys = [
	release: "AIzaSyCOvySLyinjKsfmNdlf53McsP_zgVG27zs",
	azazel: "AIzaSyDR5ZGNzSnyFQb4BI25mVCN0ocrYEY0T2o",
	tda: "AIzaSyBi3vvmErVRz97FCP706Wgcga8KRCBeFf0"
]

sourceCompatibility = 1.6

repositories {
	mavenCentral()
	maven { url "https://android-rome-feed-reader.googlecode.com/svn/maven2/releases" }
}

dependencies {

	compile( project(':common')) { exclude module: 'slf4j-api' }
	compile 'com.android.support:support-v4:19.0.0'
	compile 'com.android.support:appcompat-v7:19.0.0@aar'
	compile 'com.google.android.gms:play-services:5.0.+@aar'
	compile 'net.sf.jtidy:jtidy:r938'
	compile 'org.slf4j:slf4j-android:1.6.1-RC1'
	compile 'org.apache.commons:commons-lang3:3.2.1'
	compile 'com.google.code.android-rome-feed-reader:android-rome-feed-reader:1.0.0-r2'
	compile('com.squareup.retrofit:converter-simplexml:1.6.1'){
		exclude module: 'stax'
		exclude module: 'stax-api'
		exclude module: 'xpp3'
	}
}

/*
 subprojects {
 dependencies {
 compile('com.squareup.retrofit:converter-simplexml:1.6.1'){
 exclude module: 'stax'
 exclude module: 'stax-api'
 exclude module: 'xpp3'
 }
 }
 }
 */

configurations { provided // all*.exclude group: 'com.android.support', module: 'support-v4'
	// all*.exclude group: 'com.google.android.gms', module: 'play-services'
}

def libDir = new File(project.projectDir, 'libs')

def modifyManifest(manifest, key) {

	def root = new XmlParser().parse(manifest)
	def androidns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android",'android')
	root.'application'.'meta-data'.findAll{
		it.attributes()[androidns.name] == "com.google.android.maps.v2.API_KEY"
	}.each {
		it.attributes()[androidns.value] = key
	}
	manifest.write( XmlUtil.serialize(root) )
}

eclipse {

	classpath{

		plusConfigurations += configurations.compile
		noExportConfigurations += configurations.compile

		containers (
				"com.android.ide.eclipse.adt.ANDROID_FRAMEWORK",
				"com.android.ide.eclipse.adt.DEPENDENCIES",
				"com.android.ide.eclipse.adt.LIBRARIES"
				)

		file {
			beforeMerged { classpath ->
				classpath.entries.removeAll() { c ->
					c.kind == 'con' && c.path == 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK'
				}
				/*classpath.entries.removeAll() { c ->
				 c.kind == 'src'
				 } */
				try {
					delete libDir
					libDir.mkdirs()
				} catch (e) {
					logger.warn(e.message, e)
				}
			}

			whenMerged { classpath ->

				classpath.entries -= classpath.entries.findAll() { c ->
					def path = c.path
					path != null && (path.contains('/com.android.support/support-v4'))
				}

				classpath.entries.each() { c ->
					if (c.kind == "src" && c.path.startsWith("/")) c.exported = true
					if (c.kind == "con" && c.path == "com.android.ide.eclipse.adt.ANDROID_FRAMEWORK") c.exported = false

					def path = c.path
					if (c.kind == "lib"
					&& !(
					path.contains("appcompat-v7")
					||path.contains("support-v4")
					||path.contains("slf4j-api")
					)
					) {
						// ||path.contains("stax")||path.contains("xpp3")
						copy {
							from path
							into libDir
						}
					}
				}
			}
		}
	}

	project {

		name 'mammahelp-android'

		natures 'com.android.ide.eclipse.adt.AndroidNature',
				'org.springsource.ide.eclipse.gradle.core.nature',
				'org.eclipse.jdt.core.javanature',
				'org.eclipse.jdt.groovy.core.groovyNature'

		buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
		buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'

	}

}

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'com.android.tools.build:gradle:0.11.+' }
}


sourceSets {
	main { java { srcDir 'gen' } }
}

android {

	compileSdkVersion 19
	buildToolsVersion "19.1.0"

	defaultConfig {
		minSdkVersion 15
		targetSdkVersion 21
		versionName = project.version
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src/main/java']
			resources.srcDirs = ['src/main/resources']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		test.setRoot('tests')
		test {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}

		instrumentTest.setRoot('tests')
		instrumentTest {
			java.srcDirs = ['tests/src']
			res.srcDirs = ['tests/res']
			assets.srcDirs = ['tests/assets']
			resources.srcDirs = ['tests/src']
		}
	}

	signingConfigs {
		release {
			storeFile file("mammahelp.keystore")
			storePassword "lopata"
			keyAlias "mammahelp"
			keyPassword "lopata"
		}
	}

	buildTypes {
		release {
			runProguard false
			//proguardFile getDefaultProguardFile('proguard-android.txt')
			proguardFile 'proguard-project.txt'
			signingConfig signingConfigs.release
		}
	}

	packagingOptions { exclude 'META-INF/LICENSE.txt' }

	lintOptions { abortOnError false }

	applicationVariants.all { variant ->
		def key = gMapsKeys[variant.name]
		if(!key) key = gMapsKeys[InetAddress.localHost.hostName]
		if(!key) key = gMapsKeys["release"]
		variant.processManifest.doLast {
			project.modifyManifest(it.manifestOutputFile, key )
		}
	}
}
